{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject,\n    _templateObject2,\n    _jsxFileName = \"/home/bayons/indicom-app-master/node_modules/react-native-rating-element/src/Rating/components/IconBar.js\";\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport styled from \"styled-components/native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nvar StyledIcon = styled(Icon)(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  margin: \", \";\\n\"])), function (_ref) {\n  var margin = _ref.margin;\n  return margin ? \"0 \" + margin + \"px\" : \"0 1px\";\n});\nvar StyledImage = styled(Image)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  margin: \", \";\\n  width: \", \";\\n  height: \", \";\\n\"])), function (_ref2) {\n  var margin = _ref2.margin;\n  return margin ? \"0 \" + margin + \"px\" : \"0 1px\";\n}, function (_ref3) {\n  var size = _ref3.size;\n  return size + \"px\";\n}, function (_ref4) {\n  var size = _ref4.size;\n  return size + \"px\";\n});\n\nvar IconBar = function IconBar(_ref5) {\n  var name = _ref5.name,\n      size = _ref5.size,\n      color = _ref5.color,\n      margin = _ref5.margin,\n      onIconTap = _ref5.onIconTap,\n      readonly = _ref5.readonly,\n      position = _ref5.position,\n      type = _ref5.type,\n      selectedIconImage = _ref5.selectedIconImage,\n      emptyIconImage = _ref5.emptyIconImage,\n      _ref5$filled = _ref5.filled,\n      filled = _ref5$filled === void 0 ? false : _ref5$filled,\n      totalCount = _ref5.totalCount,\n      isAccessible = _ref5.isAccessible;\n  return React.createElement(TouchableOpacity, {\n    activeOpacity: 1,\n    accessible: isAccessible,\n    importantForAccessibility: isAccessible ? \"yes\" : \"no\",\n    accessibilityLabel: \"Press to rate \" + (position + 1) + \" out of \" + totalCount,\n    accessibilityRole: \"button\",\n    onPress: function onPress() {\n      if (!readonly && onIconTap) {\n        onIconTap(position + 1);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 3\n    }\n  }, type === \"custom\" ? React.createElement(StyledImage, {\n    source: filled ? selectedIconImage : emptyIconImage,\n    margin: margin,\n    size: size,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }) : React.createElement(StyledIcon, {\n    name: name,\n    size: size,\n    color: color,\n    margin: margin,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }));\n};\n\nIconBar.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.number,\n  name: PropTypes.string,\n  margin: PropTypes.number,\n  onIconTap: PropTypes.func,\n  readonly: PropTypes.bool,\n  position: PropTypes.number,\n  filled: PropTypes.bool,\n  type: PropTypes.oneOf([\"icon\", \"custom\"]),\n  selectedIconImage: PropTypes.node,\n  emptyIconImage: PropTypes.node,\n  totalCount: PropTypes.number\n};\nexport default IconBar;","map":{"version":3,"sources":["/home/bayons/indicom-app-master/node_modules/react-native-rating-element/src/Rating/components/IconBar.js"],"names":["React","PropTypes","styled","Icon","StyledIcon","margin","StyledImage","Image","size","IconBar","name","color","onIconTap","readonly","position","type","selectedIconImage","emptyIconImage","filled","totalCount","isAccessible","propTypes","string","number","func","bool","oneOf","node"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,IAAP;AAEA,IAAMC,UAAU,GAAGF,MAAM,CAACC,IAAD,CAAT,8FACJ;AAAA,MAAGE,MAAH,QAAGA,MAAH;AAAA,SAAiBA,MAAM,UAAQA,MAAR,UAAqB,OAA5C;AAAA,CADI,CAAhB;AAGA,IAAMC,WAAW,GAAGJ,MAAM,CAACK,KAAD,CAAT,iIACL;AAAA,MAAGF,MAAH,SAAGA,MAAH;AAAA,SAAiBA,MAAM,UAAQA,MAAR,UAAqB,OAA5C;AAAA,CADK,EAEN;AAAA,MAAGG,IAAH,SAAGA,IAAH;AAAA,SAAiBA,IAAjB;AAAA,CAFM,EAGL;AAAA,MAAGA,IAAH,SAAGA,IAAH;AAAA,SAAiBA,IAAjB;AAAA,CAHK,CAAjB;;AAMA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,MACdC,IADc,SACdA,IADc;AAAA,MAEdF,IAFc,SAEdA,IAFc;AAAA,MAGdG,KAHc,SAGdA,KAHc;AAAA,MAIdN,MAJc,SAIdA,MAJc;AAAA,MAKdO,SALc,SAKdA,SALc;AAAA,MAMdC,QANc,SAMdA,QANc;AAAA,MAOdC,QAPc,SAOdA,QAPc;AAAA,MAQdC,IARc,SAQdA,IARc;AAAA,MASdC,iBATc,SASdA,iBATc;AAAA,MAUdC,cAVc,SAUdA,cAVc;AAAA,2BAWdC,MAXc;AAAA,MAWdA,MAXc,6BAWL,KAXK;AAAA,MAYdC,UAZc,SAYdA,UAZc;AAAA,MAadC,YAbc,SAadA,YAbc;AAAA,SAed,oBAAC,gBAAD;AACE,IAAA,aAAa,EAAE,CADjB;AAEE,IAAA,UAAU,EAAEA,YAFd;AAGE,IAAA,yBAAyB,EAAEA,YAAY,GAAG,KAAH,GAAW,IAHpD;AAIE,IAAA,kBAAkB,sBAAmBN,QAAQ,GAAG,CAA9B,iBAA0CK,UAJ9D;AAKE,IAAA,iBAAiB,EAAC,QALpB;AAME,IAAA,OAAO,EAAE,mBAAM;AACb,UAAI,CAACN,QAAD,IAAaD,SAAjB,EAA4B;AAC1BA,QAAAA,SAAS,CAACE,QAAQ,GAAG,CAAZ,CAAT;AACD;AACF,KAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYGC,IAAI,KAAK,QAAT,GACC,oBAAC,WAAD;AACE,IAAA,MAAM,EAAEG,MAAM,GAAGF,iBAAH,GAAuBC,cADvC;AAEE,IAAA,MAAM,EAAEZ,MAFV;AAGE,IAAA,IAAI,EAAEG,IAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAOC,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEE,IAAlB;AAAwB,IAAA,IAAI,EAAEF,IAA9B;AAAoC,IAAA,KAAK,EAAEG,KAA3C;AAAkD,IAAA,MAAM,EAAEN,MAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBJ,CAfc;AAAA,CAAhB;;AAuCAI,OAAO,CAACY,SAAR,GAAoB;AAClBV,EAAAA,KAAK,EAAEV,SAAS,CAACqB,MADC;AAElBd,EAAAA,IAAI,EAAEP,SAAS,CAACsB,MAFE;AAGlBb,EAAAA,IAAI,EAAET,SAAS,CAACqB,MAHE;AAIlBjB,EAAAA,MAAM,EAAEJ,SAAS,CAACsB,MAJA;AAKlBX,EAAAA,SAAS,EAAEX,SAAS,CAACuB,IALH;AAMlBX,EAAAA,QAAQ,EAAEZ,SAAS,CAACwB,IANF;AAOlBX,EAAAA,QAAQ,EAAEb,SAAS,CAACsB,MAPF;AAQlBL,EAAAA,MAAM,EAAEjB,SAAS,CAACwB,IARA;AASlBV,EAAAA,IAAI,EAAEd,SAAS,CAACyB,KAAV,CAAgB,CAAC,MAAD,EAAS,QAAT,CAAhB,CATY;AAUlBV,EAAAA,iBAAiB,EAAEf,SAAS,CAAC0B,IAVX;AAWlBV,EAAAA,cAAc,EAAEhB,SAAS,CAAC0B,IAXR;AAYlBR,EAAAA,UAAU,EAAElB,SAAS,CAACsB;AAZJ,CAApB;AAeA,eAAed,OAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Image, TouchableOpacity } from \"react-native\";\nimport styled from \"styled-components/native\";\nimport Icon from \"react-native-vector-icons/Ionicons\";\n\nconst StyledIcon = styled(Icon)`\n  margin: ${({ margin }) => (margin ? `0 ${margin}px` : \"0 1px\")};\n`;\nconst StyledImage = styled(Image)`\n  margin: ${({ margin }) => (margin ? `0 ${margin}px` : \"0 1px\")};\n  width: ${({ size }) => `${size}px`};\n  height: ${({ size }) => `${size}px`};\n`;\n\nconst IconBar = ({\n  name,\n  size,\n  color,\n  margin,\n  onIconTap,\n  readonly,\n  position,\n  type,\n  selectedIconImage,\n  emptyIconImage,\n  filled = false,\n  totalCount,\n  isAccessible,\n}) => (\n  <TouchableOpacity\n    activeOpacity={1}\n    accessible={isAccessible}\n    importantForAccessibility={isAccessible ? \"yes\" : \"no\"}\n    accessibilityLabel={`Press to rate ${position + 1} out of ${totalCount}`}\n    accessibilityRole=\"button\"\n    onPress={() => {\n      if (!readonly && onIconTap) {\n        onIconTap(position + 1);\n      }\n    }}\n  >\n    {type === \"custom\" ? (\n      <StyledImage\n        source={filled ? selectedIconImage : emptyIconImage}\n        margin={margin}\n        size={size}\n      />\n    ) : (\n      <StyledIcon name={name} size={size} color={color} margin={margin} />\n    )}\n  </TouchableOpacity>\n);\n\nIconBar.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.number,\n  name: PropTypes.string,\n  margin: PropTypes.number,\n  onIconTap: PropTypes.func,\n  readonly: PropTypes.bool,\n  position: PropTypes.number,\n  filled: PropTypes.bool,\n  type: PropTypes.oneOf([\"icon\", \"custom\"]),\n  selectedIconImage: PropTypes.node,\n  emptyIconImage: PropTypes.node,\n  totalCount: PropTypes.number,\n};\n\nexport default IconBar;\n"]},"metadata":{},"sourceType":"module"}