{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/rodrigo/indicom/app/pages/Login/NovaSenha.jsx\";\nimport React from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as Utils from \"./utils\";\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport Styles from \"./styles\";\nimport Api from \"../../services/Api\";\nimport ApplicationContext from \"../../contexts/application\";\nimport AuthContext from \"../../contexts/auth\";\nimport Button from \"../../components/Button\";\nimport Input from \"../../components/Input\";\nimport Logo from \"../../../assets/img/logo.png\";\nvar styles = StyleSheet.create(Styles);\n\nvar NovaSenha = function NovaSenha(props) {\n  var navigation = useNavigation();\n\n  var _React$useContext = React.useContext(ApplicationContext),\n      setLoading = _React$useContext.setLoading;\n\n  var _React$useContext2 = React.useContext(AuthContext),\n      sethasUpdatePassword = _React$useContext2.sethasUpdatePassword;\n\n  React.useEffect(function () {\n    sethasUpdatePassword(true);\n  }, []);\n\n  var handleRecover = function handleRecover(data) {\n    var validPassword, code, response;\n    return _regeneratorRuntime.async(function handleRecover$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(data.password != data.passwordCheck)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Alert.alert('Atenção', 'As senhas não conferem'));\n\n          case 4:\n            validPassword = Utils.checkPassword(data.password);\n\n            if (validPassword) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Alert.alert('Atenção', 'Senha deve ter no mínimo 6 caracteres com pelo menos uma letra e um número'));\n\n          case 7:\n            code = props.route.params.code;\n            setLoading(true);\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(Api.post(\"v1/new-password\", {\n              code: code,\n              password: data.password\n            }));\n\n          case 11:\n            response = _context.sent;\n            setLoading(false);\n\n            if (!(response.status != 200)) {\n              _context.next = 17;\n              break;\n            }\n\n            Alert.alert('Atenção', \"Erro ao criar nova senha\");\n            _context.next = 19;\n            break;\n\n          case 17:\n            Alert.alert('Sucesso', \"Nova senha criada\");\n            return _context.abrupt(\"return\", navigation.navigate('LoginManual'));\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.wrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, React.createElement(ScrollView, {\n    style: {\n      width: '100%',\n      marginTop: 30\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, React.createElement(KeyboardAwareScrollView, {\n    resetScrollToCoords: {\n      x: 0,\n      y: 0\n    },\n    style: {\n      backgroundColor: '#FFFEAB'\n    },\n    scrollEnabled: false,\n    keyboardOpeningTime: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: styles.wrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, React.createElement(Image, {\n    source: Logo,\n    style: styles.imageContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  }), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }, \"A melhor plataforma comercial de indica\\xE7\\xE3o online!\"), React.createElement(Text, {\n    style: styles.subTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }\n  }, \"Nova senha\"), React.createElement(Formik, {\n    initialValues: {\n      password: '',\n      passwordCheck: ''\n    },\n    onSubmit: function onSubmit(data) {\n      return handleRecover(data);\n    },\n    validationSchema: yup.object().shape({\n      password: yup.string().required(),\n      passwordCheck: yup.string().required()\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, function (_ref) {\n    var handleChange = _ref.handleChange,\n        handleBlur = _ref.handleBlur,\n        handleSubmit = _ref.handleSubmit,\n        values = _ref.values,\n        errors = _ref.errors,\n        isValid = _ref.isValid;\n    return React.createElement(View, {\n      style: styles.socialMediaContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 33\n      }\n    }, React.createElement(Input, {\n      onChangeText: handleChange('password'),\n      onBlur: handleBlur('password'),\n      placeholder: \"Insira uma nova senha\",\n      textContentType: \"password\",\n      secureTextEntry: true,\n      customStyle: {\n        marginBottom: 13\n      },\n      error: errors.password,\n      value: values.password,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 37\n      }\n    }), React.createElement(Input, {\n      onChangeText: handleChange('passwordCheck'),\n      onBlur: handleBlur('passwordCheck'),\n      placeholder: \"Confirme sua senha\",\n      textContentType: \"password\",\n      secureTextEntry: true,\n      customStyle: {\n        marginBottom: 13\n      },\n      error: errors.passwordCheck,\n      value: values.passwordCheck,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 37\n      }\n    }), React.createElement(Button, {\n      onPress: handleSubmit,\n      disabled: !isValid,\n      customStyles: {\n        backgroundColor: '#FFD500',\n        marginBottom: 13\n      },\n      textColor: \"#000\",\n      label: \"Enviar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 37\n      }\n    }));\n  })))));\n};\n\nexport default NovaSenha;","map":{"version":3,"sources":["/Users/rodrigo/indicom/app/pages/Login/NovaSenha.jsx"],"names":["React","useNavigation","Utils","KeyboardAwareScrollView","Formik","yup","Styles","Api","ApplicationContext","AuthContext","Button","Input","Logo","styles","StyleSheet","create","NovaSenha","props","navigation","useContext","setLoading","sethasUpdatePassword","useEffect","handleRecover","data","password","passwordCheck","Alert","alert","validPassword","checkPassword","code","route","params","post","response","status","navigate","wrapper","width","marginTop","x","y","backgroundColor","imageContainer","subTitle","object","shape","string","required","handleChange","handleBlur","handleSubmit","values","errors","isValid","socialMediaContainer","marginBottom"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { StyleSheet, View, Text, Image, ScrollView, Alert } from 'react-native';\nimport * as Utils from './utils';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport Styles from './styles';\nimport Api from '../../services/Api';\nimport ApplicationContext from '../../contexts/application';\nimport AuthContext from '../../contexts/auth';\n\nimport Button from '../../components/Button';\nimport Input from '../../components/Input';\n\nimport Logo from '../../../assets/img/logo.png';\n\nconst styles = StyleSheet.create(Styles);\n\nconst NovaSenha = (props) => {\n    const navigation = useNavigation();\n    const { setLoading } = React.useContext(ApplicationContext);\n    const { sethasUpdatePassword } = React.useContext(AuthContext);\n\n    React.useEffect( () => {\n        sethasUpdatePassword(true);\n    }, [])\n\n    const handleRecover = async (data) => {\n        if (data.password != data.passwordCheck) {\n            return Alert.alert('Atenção', 'As senhas não conferem');\n        } else {\n            const validPassword = Utils.checkPassword(data.password);\n            if (!validPassword)\n                return Alert.alert(\n                    'Atenção',\n                    'Senha deve ter no mínimo 6 caracteres com pelo menos uma letra e um número'\n                );\n            const { code } = props.route.params;\n            setLoading(true);\n            const response = await Api.post(`v1/new-password`, {\n                code,\n                password: data.password\n            });\n            setLoading(false);\n            if (response.status != 200) {\n                Alert.alert(\n                    'Atenção',\n                    \"Erro ao criar nova senha\"\n                );\n            } else {\n                Alert.alert(\n                    'Sucesso',\n                    \"Nova senha criada\"\n                );\n\n                return navigation.navigate('LoginManual');\n            }\n        }\n    };\n\n    return (\n        <View style={styles.wrapper}>\n            <ScrollView style={{ width: '100%', marginTop: 30 }}>\n                <KeyboardAwareScrollView\n                    resetScrollToCoords={{ x: 0, y: 0 }}\n                    style={{ backgroundColor: '#FFFEAB' }}\n                    scrollEnabled={false}\n                    keyboardOpeningTime={0}\n                >\n                    <View style={styles.wrapper}>\n                        <Image source={Logo} style={styles.imageContainer} />\n                        <Text>A melhor plataforma comercial de indicação online!</Text>\n                        <Text style={styles.subTitle}>Nova senha</Text>\n                        <Formik\n                            initialValues={{\n                                password: '',\n                                passwordCheck: ''\n                            }}\n                            onSubmit={(data) => handleRecover(data)}\n                            validationSchema={yup.object().shape({\n                                password: yup.string().required(),\n                                passwordCheck: yup.string().required(),\n                            })}\n                        >\n                            {({\n                                handleChange,\n                                handleBlur,\n                                handleSubmit,\n                                values,\n                                errors,\n                                isValid,\n                            }) => (\n                                <View style={styles.socialMediaContainer}>\n                                    <Input\n                                        onChangeText={handleChange('password')}\n                                        onBlur={handleBlur('password')}\n                                        placeholder=\"Insira uma nova senha\"\n                                        textContentType=\"password\"\n                                        secureTextEntry\n                                        customStyle={{ marginBottom: 13 }}\n                                        error={errors.password}\n                                        value={values.password}\n                                    />\n                                    <Input\n                                        onChangeText={handleChange('passwordCheck')}\n                                        onBlur={handleBlur('passwordCheck')}\n                                        placeholder=\"Confirme sua senha\"\n                                        textContentType=\"password\"\n                                        secureTextEntry\n                                        customStyle={{ marginBottom: 13 }}\n                                        error={errors.passwordCheck}\n                                        value={values.passwordCheck}\n                                    />\n                                    <Button\n                                        onPress={handleSubmit}\n                                        disabled={!isValid}\n                                        customStyles={{\n                                            backgroundColor: '#FFD500',\n                                            marginBottom: 13,\n                                        }}\n                                        textColor=\"#000\"\n                                        label=\"Enviar\"\n                                    />\n                                </View>\n                            )}\n                        </Formik>\n                    </View>\n                </KeyboardAwareScrollView>\n            </ScrollView>\n        </View>\n    );\n};\n\nexport default NovaSenha;\n"]},"metadata":{},"sourceType":"module"}