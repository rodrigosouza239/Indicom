{"ast":null,"code":"var _jsxFileName = \"/Users/rodrigo/indicom/app/routes/Routes.jsx\";\nimport React, { useContext } from 'react';\nimport AuthContext from \"../contexts/auth\";\nimport PublicRoutes from \"./PublicRoutes\";\nimport PrivateRoutes from \"./PrivateRoutes\";\nimport { navigationRef } from \"../App\";\nimport * as Linking from 'expo-linking';\n\nvar Routes = function Routes() {\n  var _useContext = useContext(AuthContext),\n      logado = _useContext.logado,\n      hasUpdatePassword = _useContext.hasUpdatePassword;\n\n  React.useEffect(function () {\n    console.log(hasUpdatePassword);\n    Linking.getInitialURL().then(!logado && !hasUpdatePassword && urlRedirect);\n\n    var urlRedirect = function urlRedirect(url) {\n      console.log(Linking.parse(url));\n      if (!url) return;\n\n      var _Linking$parse = Linking.parse(url),\n          queryParams = _Linking$parse.queryParams;\n\n      if (!queryParams.queryparams) return;\n\n      var _JSON$parse = JSON.parse(queryParams.queryparams),\n          nameroute = _JSON$parse.nameroute;\n\n      if (nameroute) navigationRef.current.navigate(nameroute, JSON.parse(queryParams.queryparams));\n    };\n\n    Linking.addEventListener('url', function (event) {\n      !logado && !hasUpdatePassword && urlRedirect(event.url);\n    });\n  }, [hasUpdatePassword]);\n  return !logado ? React.createElement(PublicRoutes, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 20\n    }\n  }) : React.createElement(PrivateRoutes, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 39\n    }\n  });\n};\n\nexport default Routes;","map":{"version":3,"sources":["/Users/rodrigo/indicom/app/routes/Routes.jsx"],"names":["React","useContext","AuthContext","PublicRoutes","PrivateRoutes","navigationRef","Linking","Routes","logado","hasUpdatePassword","useEffect","console","log","getInitialURL","then","urlRedirect","url","parse","queryParams","queryparams","JSON","nameroute","current","navigate","addEventListener","event"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,WAAP;AAEA,OAAOC,YAAP;AACA,OAAOC,aAAP;AACA,SAASC,aAAT;AACA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AAAA,oBACmBN,UAAU,CAACC,WAAD,CAD7B;AAAA,MACXM,MADW,eACXA,MADW;AAAA,MACHC,iBADG,eACHA,iBADG;;AAEnBT,EAAAA,KAAK,CAACU,SAAN,CAAgB,YAAM;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYH,iBAAZ;AACAH,IAAAA,OAAO,CAACO,aAAR,GAAwBC,IAAxB,CAA6B,CAACN,MAAD,IAAW,CAACC,iBAAZ,IAAiCM,WAA9D;;AACA,QAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAS;AAC3BL,MAAAA,OAAO,CAACC,GAAR,CAAYN,OAAO,CAACW,KAAR,CAAcD,GAAd,CAAZ;AACA,UAAG,CAACA,GAAJ,EAAS;;AAFkB,2BAGLV,OAAO,CAACW,KAAR,CAAcD,GAAd,CAHK;AAAA,UAGrBE,WAHqB,kBAGrBA,WAHqB;;AAI3B,UAAG,CAACA,WAAW,CAACC,WAAhB,EAA6B;;AAJF,wBAKLC,IAAI,CAACH,KAAL,CAAWC,WAAW,CAACC,WAAvB,CALK;AAAA,UAKnBE,SALmB,eAKnBA,SALmB;;AAM3B,UAAGA,SAAH,EACEhB,aAAa,CAACiB,OAAd,CAAsBC,QAAtB,CAA+BF,SAA/B,EAA0CD,IAAI,CAACH,KAAL,CAAWC,WAAW,CAACC,WAAvB,CAA1C;AACH,KARD;;AAUAb,IAAAA,OAAO,CAACkB,gBAAR,CAAyB,KAAzB,EAAgC,UAAAC,KAAK,EAAI;AACvC,OAACjB,MAAD,IAAW,CAACC,iBAAZ,IAAiCM,WAAW,CAACU,KAAK,CAACT,GAAP,CAA5C;AACD,KAFD;AAGD,GAhBD,EAgBG,CAACP,iBAAD,CAhBH;AAiBA,SAAO,CAACD,MAAD,GAAU,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAV,GAA6B,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAApC;AACD,CApBD;;AAsBA,eAAeD,MAAf","sourcesContent":["import React, { useContext } from 'react';\nimport AuthContext from '../contexts/auth';\n\nimport PublicRoutes from './PublicRoutes';\nimport PrivateRoutes from './PrivateRoutes';\nimport { navigationRef } from \"../App\";\nimport * as Linking from 'expo-linking'\n\nconst Routes = () => {\n  const { logado, hasUpdatePassword } = useContext(AuthContext);\n  React.useEffect(() => {\n    console.log(hasUpdatePassword)\n    Linking.getInitialURL().then(!logado && !hasUpdatePassword && urlRedirect)\n    const urlRedirect = (url) => {\n      console.log(Linking.parse(url))\n      if(!url) return;\n      let { queryParams } = Linking.parse(url);\n      if(!queryParams.queryparams) return;\n      const { nameroute } = JSON.parse(queryParams.queryparams);\n      if(nameroute)\n        navigationRef.current.navigate(nameroute, JSON.parse(queryParams.queryparams))\n    }\n    \n    Linking.addEventListener('url', event => {\n      !logado && !hasUpdatePassword && urlRedirect(event.url);\n    });\n  }, [hasUpdatePassword]);\n  return !logado ? <PublicRoutes /> : <PrivateRoutes />;\n};\n\nexport default Routes;\n"]},"metadata":{},"sourceType":"module"}